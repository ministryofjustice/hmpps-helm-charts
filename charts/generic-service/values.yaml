---
# Default values for generic-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 4

image:
  repository: example_repo/example_image
  pullPolicy: IfNotPresent
  port: 3000
  # image tag is overridden at deployment time using helm "--set" option
  tag: "example_app_version"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Product ID as specified in the service catalogue
# productId: "ID"

# override docker image CMD
containerArgs: []

# override docker image ENTRYPOINT
containerCommand: []

serviceAccountName: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

# Changing the defaults values for securityContext below will have no effect. They are
# listed here to prevent warning messages appearing and to also document the values.
# If these values are not set here, then the gatekeeper admission controller will set.
# See https://github.com/ministryofjustice/cloud-platform-terraform-gatekeeper/tree/main/resources/mutations
securityContext: &securityContext
  capabilities:
    drop:
    - ALL
  runAsNonRoot: true
  allowPrivilegeEscalation: false
  seccompProfile:
    type: RuntimeDefault

service:
  enabled: true
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations:
    nginx.ingress.kubernetes.io/custom-http-errors: "418"
  # 'host' only remains for backwards compatibility. 'hosts' should be used instead
  # One entry in 'hosts'/'host' needs to be no larger than 64 chars if you want a functioning cert.
  # that entry will be used as the CN for the cert, the others will be SANs. This allows you to have
  # long, intelligible DNS names (SANs).
  host: chart-example.local
  hosts: []
  path: /
  healthPath: /health
  tlsSecretName: chart-example-tls
  modsecurity_enabled: false
  modsecurity_audit_enabled: false
  modsecurity_github_team: ""
  modsecurity_snippet: |
    SecRuleEngine On
    {{ if .Values.ingress.modsecurity_audit_enabled -}}
    SecAuditEngine On
    SecAuditLog /var/log/nginx/error.log
    SecAuditLogType Serial
    {{ end -}}
    {{ if .Values.ingress.modsecurity_github_team -}}
    SecDefaultAction "phase:2,pass,log,tag:github_team={{ .Values.ingress.modsecurity_github_team }},tag:namespace={{ .Release.Namespace }}"
    {{ end -}}
    SecRuleUpdateActionById 949110 "t:none,deny,status:406,logdata:%{SERVER_NAME}"
    SecRuleUpdateActionById 959100 "t:none,deny,status:406,logdata:%{SERVER_NAME}"
    SecAction \
      "id:900000,\
       phase:1,\
       nolog,\
       pass,\
       t:none,\
       setvar:tx.paranoia_level=2"

# IP allowlist to be applied via ingress-nginx.
allowlist: {}
# Version of allowlist being applied (supplied by CI/CD)
allowlist_version: ""
# Example allowlist structure.
# When using the 'groups' key, the value of 'allowlist_groups' must also exist, see below.

# allowlist:
#   custom-1: "1.1.1.1/32"
#   custom-2: "1.1.1.2/32"
#   groups:
#     - example-group-1
#     - example-group-2

# Example allowlist_groups data structure, contains all the possible predefined groups.
# This will normally be added via CI/CD as an additional '--values' argument to helm,
# and the data coming from a centrally managed source. See the deploy_env job defined
# in the hmpps circleci orb for example.

# allowlist_groups:
#   example-group-1:
#     item-1: "0.0.0.0/32"
#     item-2: "0.0.0.0/32"
#   example-group-2:
#     item-1: "0.0.0.0/32"
#     item-2: "0.0.0.0/32"

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

envFrom: []
  # - configMapRef:
  #     name: example-config-map
  # - secretRef:
  #     name: example-secret

# Additional volumes on the output Deployment definition.
volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

extraContainers: []
  # - name: example-extra-container
  #   image: "example_repo/example_image:example_app_version"
  #   imagePullPolicy: IfNotPresent
  #   ports:
  #     - name: http
  #       containerPort: 3000
  #       protocol: TCP

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

poddisruptionbudget:
  enabled: true
  minAvailable: 1

nodeSelector: {}

tolerations: []

affinity: {}

livenessProbe:
  httpGet:
    path: /health/liveness
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 10
  failureThreshold: 10

readinessProbe:
  httpGet:
    path: /health/readiness
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 10
  failureThreshold: 10

# Example pod lifecycle hooks
# lifecycle:
#   postStart:
#     exec:
#       command: ["/bin/sh", "-c", "echo Hello from the postStart handler"]
#   preStop:
#     exec:
#       command: ["/bin/sh", "-c", "echo Hello from the preStop handler"]

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 100%
    maxUnavailable: 0

custommetrics:
  enabled: false
  scrapeInterval: 15s
  metricsPath: /metrics
  metricsPort: http

# Devops tools image is used in retry DLQ cronjob below - should be kept up-to-date.
# using 'latest' tag causes warning messages, so using 'main' tag instead.
devopsToolsImage: &devopsToolsImage ghcr.io/ministryofjustice/hmpps-devops-tools
devopsToolsTag: &devopsToolsTag main

# postgres tools image is used in db restore cronjob below - should be kept up-to-date.
# using 'latest' tag causes warning messages, so using 'main' tag instead.
postgresToolsImage: &postgresToolsImage ghcr.io/ministryofjustice/hmpps-postgres-tools
postgresToolsTag: &postgresToolsTag main

postgresDatabaseRestore:
  jobName:
  enabled: false
# Required environment secrets for the restore script:
#  namespace_secrets:
#    dps-rds-instance-output:
#      DB_NAME: "database_name"
#      DB_USER: "database_username"
#      DB_PASS: "database_password"
#      DB_HOST: "rds_instance_address"
#    dps-rds-instance-output-preprod:
#      DB_NAME_PREPROD: "database_name"
#      DB_USER_PREPROD: "database_username"
#      DB_PASS_PREPROD: "database_password"
#      DB_HOST_PREPROD: "rds_instance_address"
# Optional schema name if not using the default 'public' schema:
#  env:
#    SCHEMA_TO_RESTORE: "my_schema"
  image: *postgresToolsImage
  tag: *postgresToolsTag
  securityContext: *securityContext
  # Default schedule is at minute 30 past every 4th hour from 6am through 9pm UTC Monday-Friday
  schedule: "30 6-21/4 * * 1-5"

scheduledDowntime:
  enabled: false
  # Start at 6:30am UTC Monday-Friday
  startup: '30 6 * * 1-5'
  # Stop at 10pm UTC Monday-Friday
  shutdown: '0 22 * * 1-5'
  serviceAccountName: scheduled-downtime-serviceaccount
  # every 10 minutes between 7am and 10pm UTC Monday-Friday
  retryDlqSchedule: "*/10 7-21 * * 1-5"
  image: *postgresToolsImage
  tag: *postgresToolsTag
  securityContext: *securityContext

retryDlqCronjob:
  enabled: false
  # every 10 minutes
  retryDlqSchedule: "*/10 * * * *"
  image: *devopsToolsImage
  tag: *devopsToolsTag
  securityContext: *securityContext
